package com.hoioy.diamond.sys.api;import com.hoioy.diamond.common.api.BaseJoinController;import com.hoioy.diamond.common.dto.ResultDTO;import com.hoioy.diamond.sys.dto.MenuDTO;import com.hoioy.diamond.sys.dto.RoleDTO;import com.hoioy.diamond.sys.dto.RoleMenuJoinDTO;import com.hoioy.diamond.sys.service.IMenuService;import com.hoioy.diamond.sys.service.IRoleMenuService;import com.hoioy.diamond.sys.service.IRoleService;import com.fasterxml.jackson.core.type.TypeReference;import com.fasterxml.jackson.databind.ObjectMapper;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.io.IOException;import java.util.*;@RestController@Api(tags = {"09.菜单Menu与角色关联操作接口"})@RequestMapping("/sys/role-menu")public class RoleMenuController extends BaseJoinController<IRoleMenuService, RoleMenuJoinDTO> {    @Autowired    private IRoleService iRoleService;    @Autowired    private IMenuService iMenuService;    @Autowired    private ObjectMapper objectMapper;    static final String ROLE_ID = "roleId";    static final String MENUIDS_FOR_SEARCH = "menuIds";    @ApiOperation(value = "根据菜单Id查询所有角色")    @GetMapping(value = "/findRolesByMenuId")    public ResultDTO findRolesByMenuId(String menuId) {        List<String> roleIds = iBaseService.findRoleIdsByMenuIds(Arrays.asList(menuId));        List<RoleDTO> roleDTOS = iRoleService.findByIds(roleIds);        return new ResultDTO(roleDTOS);    }    @ApiOperation(value = "根据RoleId查询所有菜单")    @GetMapping(value = "/findMenusByRoleId")    public ResultDTO findMenusByRoleId(String roleId) {        List<String> menuIds = iBaseService.findMenuIdsByRoleIds(Arrays.asList(roleId));        List<MenuDTO> menuDTOS = iMenuService.findByIds(menuIds);        return new ResultDTO(menuDTOS);    }    @ApiOperation(value = "根据RoleId查询所有MenuId")    @GetMapping(value = "/findMenuIdsByRoleId")    public ResultDTO findMenuIdsByRoleId(String roleId) {        List<String> menuIds = iBaseService.findMenuIdsByRoleIds(Arrays.asList(roleId));        Iterator<String> iterator = menuIds.iterator();        while (iterator.hasNext()) {            String menuid = iterator.next();            List<MenuDTO> menuFromParent = iMenuService.findByParentId(menuid);            int k = 0;            if (menuFromParent != null) {                for (MenuDTO menuDto : menuFromParent) {                    for (String id : menuIds) {                        if (menuDto.getId().equals(id)) {                            k++;                        }                    }                }                if (k != menuFromParent.size()) {                    iterator.remove();                }            }        }        return new ResultDTO(menuIds);    }    //TODO  zhoujial 2018/11/16    @ApiOperation(value = "角色信息下重置菜单,zhoujial", notes = "sys/role/reset-menus")    @PostMapping(value = "/reset-menus")    public ResultDTO roleMenuReset(@RequestBody String models) throws IOException {        ResultDTO resultMap = new ResultDTO();        Map roleMenu = new HashMap();        roleMenu = objectMapper.readValue(models, new TypeReference<Map>() {        });        String roleId = (String) roleMenu.get(ROLE_ID);        List<String> preMenuIds = iBaseService.findMenuIdsByRoleIds(Arrays.asList(roleId));        String[] menuIds = new String[((ArrayList) roleMenu.get(MENUIDS_FOR_SEARCH)).size()];        for (int i = 0; i < (((ArrayList) roleMenu.get(MENUIDS_FOR_SEARCH)).size()); i++) {            menuIds[i] = (String) ((ArrayList) roleMenu.get(MENUIDS_FOR_SEARCH)).get(i);        }        iBaseService.saveRoleMenusForRest(menuIds, preMenuIds, (String) roleMenu.get(ROLE_ID));        resultMap = new ResultDTO();        return resultMap;    }}