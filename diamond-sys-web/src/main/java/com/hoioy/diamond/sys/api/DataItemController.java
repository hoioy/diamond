package com.hoioy.diamond.sys.api;import com.hoioy.diamond.common.api.BaseTreeController;import com.hoioy.diamond.common.dto.PageDTO;import com.hoioy.diamond.common.dto.ResultDTO;import com.hoioy.diamond.sys.dto.DataItemDTO;import com.hoioy.diamond.sys.service.IDataItemService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@Api(tags = {"11.数据字典操作接口"})@RequestMapping("/sys/dataitem")public class DataItemController extends BaseTreeController<IDataItemService, DataItemDTO> {    //TODO zhaozhao 不建议提供全量查询接口，建议提供根据parentId动态构建树的方式    @ApiOperation(value = "加载全部数据字典树")    @GetMapping(value = "/query/all")    public ResultDTO queryAllTree(String parentId) {        PageDTO pageDTO = new PageDTO();        pageDTO.setPageSize(Integer.MAX_VALUE);        pageDTO.setPage(1);        DataItemDTO filters = new DataItemDTO();        pageDTO.setFilters(filters);        pageDTO = iBaseService.findDataItemByTypePageable(pageDTO);        List tree = iBaseService.listToTree(pageDTO.getList(), parentId);        pageDTO.setList(tree);        return new ResultDTO(pageDTO);    }    //TODO 后续会将此方法删除,树型格式转换放到vue前端    @ApiOperation(value = "加载全部数据字典树")    @PostMapping(value = "/query/all")    public ResultDTO queryAllTreeType(@RequestParam(value = "id", required = false) String id) {        PageDTO<DataItemDTO> pageDTO = new PageDTO();        pageDTO.setPageSize(Integer.MAX_VALUE);        pageDTO.setPage(1);        //TODO 字符串判断bug，暂不修复，因为后续会将此方法删除        if (id != null) {            DataItemDTO filters = new DataItemDTO();            filters.setDataItemTypeId(id);            pageDTO.setFilters(filters);        } else {            DataItemDTO filters = new DataItemDTO();            pageDTO.setFilters(filters);        }        pageDTO = iBaseService.findDataItemByTypePageable(pageDTO);        List tree = iBaseService.listToTree(pageDTO.getList(), null);        pageDTO.setList(tree);        return new ResultDTO(pageDTO);    }}