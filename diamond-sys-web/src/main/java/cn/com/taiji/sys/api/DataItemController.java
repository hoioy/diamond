package com.hoioy.diamond.sys.api;import com.hoioy.diamond.common.api.BaseController;import com.hoioy.diamond.common.dto.PageDTO;import com.hoioy.diamond.common.dto.ResultDTO;import com.hoioy.diamond.common.exception.BaseException;import com.hoioy.diamond.sys.dto.DataItemDTO;import com.hoioy.diamond.sys.service.IDataItemService;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.util.CollectionUtils;import org.springframework.web.bind.annotation.*;import javax.validation.Valid;import java.util.List;import java.util.Map;import java.util.Optional;@RestController@Api(tags = {"07.数据字典操作接口"})@RequestMapping("system/dictionary")public class DataItemController extends BaseController<IDataItemService, DataItemDTO> {    /**     * 根据条件，分页查询业务字典或业务字典分类     */    @Valid    @ApiOperation(value = "根据条件，分页查询业务字典或业务字典分类")    @PostMapping(value = "/query-page")    public ResultDTO queryAllPage(@RequestBody PageDTO pageDTO) {       return onePageSearch(pageDTO);    }    /**     * 根据条件，查询业务字典或业务字典分类（不分页）     */    @Valid    @ApiOperation(value = "根据条件，查询业务字典或业务字典分类（不分页）")    @PostMapping(value = "/query-all")    public ResultDTO queryAll(@RequestBody PageDTO pageDTO) {        pageDTO.setPageSize(Integer.MAX_VALUE);        pageDTO.setPage(1);        return onePageSearch(pageDTO);    }    private ResultDTO onePageSearch(PageDTO pageDTO){        //TODO zhaozhao dataItem前端优化为只有一个数据字典，此处只需查询树就可以        Boolean isSearchTree = false;        Boolean isRemoveParentIdFilter = false;        String tempParentId = null;        Map temp = null;        if (!CollectionUtils.isEmpty(pageDTO.getFilters())) {            final List<Map> filters1 = pageDTO.getFilters();            for (Map f : filters1) {                String field = f.get("field").toString().trim();                String value = f.get("value").toString().trim();                if ("parentId".equalsIgnoreCase(field)) {                    tempParentId = value;                    if (value.equals("root")) {                        temp = f;                        isRemoveParentIdFilter = true;                        tempParentId = null;                    }                }                if ("category".equalsIgnoreCase(field) && value.equals("3")) {                    isSearchTree = true;                }            }        }        if(isRemoveParentIdFilter){            pageDTO.getFilters().remove(temp);        }        pageDTO = iBaseService.getPage(pageDTO);        if (isSearchTree) {            List tree = iBaseService.listToTree(pageDTO.getList(),tempParentId);            pageDTO.setList(tree);        }        return new ResultDTO(pageDTO);    }    /**     * 增加新的业务字典分类或字典，并完整返回该业务字典分类或字典信息     */    @Valid    @ApiOperation(value = "增加新的业务字典分类或字典，并完整返回该业务字典分类或字典信息")    @PostMapping(value = "/add")    public ResultDTO add(@RequestBody DataItemDTO dataItemDto) throws BaseException {        dataItemDto.setParentId(dataItemDto.getType());        String id = iBaseService.save(dataItemDto);        Optional<DataItemDTO> dataItem = iBaseService.findById(id);        return new ResultDTO(dataItem.get());    }    /**     * 编辑业务字典分类或字典信息，后端告知前端结果即可     */    @ResponseBody    @ApiOperation(value = "编辑业务字典分类或字典信息，后端告知前端结果即可")    @PostMapping(value = "/edit")    public ResultDTO edit(@RequestBody DataItemDTO dataItemDto) {        String id = iBaseService.update(dataItemDto);        Optional<DataItemDTO> dataItemDTO = iBaseService.findById(id);        return new ResultDTO(dataItemDTO.get());    }    /**     * 删除业务字典分类或字典，后端告知前端结果即可     */    @ApiOperation(value = "删除业务字典分类或字典，后端告知前端结果即可")    @GetMapping(value = "/del")    public ResultDTO del(@RequestParam String id) {        iBaseService.removeById(id);        return new ResultDTO();    }    /**     * 根据id查询数据字典     */    @ApiOperation(value = "根据id查询数据字典")    @GetMapping(value = "/query-by-id")    public ResultDTO queryById(@RequestParam String id) {        Optional<DataItemDTO> dataItemDto = iBaseService.findById(id);        return new ResultDTO(dataItemDto.get());    }}